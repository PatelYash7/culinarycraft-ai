generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  recipes       Recipe[]  // A user can have many recipes

  // NextAuth.js fields
  accounts      Account[]
  sessions      Session[]
}

// Recipe model
model Recipe {
  id          String      @id @default(cuid())
  title       String      // Title of the recipe
  description String?     // Description of the recipe
  ingredients Ingredient[] // Ingredients used in the recipe
  instructions String     // Cooking instructions
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      // Foreign key to User
  user        User        @relation(fields: [userId], references: [id]) // Relationship to User
}

// Ingredient model
model Ingredient {
  id        String   @id @default(cuid())
  name      String   // Name of the ingredient
  quantity  String?  // Quantity of the ingredient (e.g., "2 cups")
  recipeId  String   // Foreign key to Recipe
  recipe    Recipe   @relation(fields: [recipeId], references: [id]) // Relationship to Recipe
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}